// Code generated by protoc-gen-go.
// source: golang.lakeparime.com/apis/antminerapi/antminerapi.proto
// DO NOT EDIT!

/*
Package antminerapi is a generated protocol buffer package.

It is generated from these files:
	golang.lakeparime.com/apis/antminerapi/antminerapi.proto

It has these top-level messages:
	Status
*/
package antminerapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import powernode "golang.lakeparime.com/apis/powernode"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status struct {
	Status powernode.HashingStatus `protobuf:"varint,1,opt,name=Status,enum=powernode.HashingStatus" json:"Status,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Status) GetStatus() powernode.HashingStatus {
	if m != nil {
		return m.Status
	}
	return powernode.HashingStatus_UNKNOWN
}

func init() {
	proto.RegisterType((*Status)(nil), "antminerapi.Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Antminerapi service

type AntminerapiClient interface {
	// stop hashing gracefully, e.g. let it finish its work
	StopGracefully(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// stop right now, that is, loosing work and blocks and money
	StopNow(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// start cgminer again
	Start(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error)
	// get status of cgminer
	GetStatus(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Status, error)
}

type antminerapiClient struct {
	cc *grpc.ClientConn
}

func NewAntminerapiClient(cc *grpc.ClientConn) AntminerapiClient {
	return &antminerapiClient{cc}
}

func (c *antminerapiClient) StopGracefully(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/antminerapi.Antminerapi/StopGracefully", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antminerapiClient) StopNow(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/antminerapi.Antminerapi/StopNow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antminerapiClient) Start(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/antminerapi.Antminerapi/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antminerapiClient) GetStatus(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/antminerapi.Antminerapi/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Antminerapi service

type AntminerapiServer interface {
	// stop hashing gracefully, e.g. let it finish its work
	StopGracefully(context.Context, *common.Void) (*common.Void, error)
	// stop right now, that is, loosing work and blocks and money
	StopNow(context.Context, *common.Void) (*common.Void, error)
	// start cgminer again
	Start(context.Context, *common.Void) (*common.Void, error)
	// get status of cgminer
	GetStatus(context.Context, *common.Void) (*Status, error)
}

func RegisterAntminerapiServer(s *grpc.Server, srv AntminerapiServer) {
	s.RegisterService(&_Antminerapi_serviceDesc, srv)
}

func _Antminerapi_StopGracefully_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntminerapiServer).StopGracefully(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antminerapi.Antminerapi/StopGracefully",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntminerapiServer).StopGracefully(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Antminerapi_StopNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntminerapiServer).StopNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antminerapi.Antminerapi/StopNow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntminerapiServer).StopNow(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Antminerapi_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntminerapiServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antminerapi.Antminerapi/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntminerapiServer).Start(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Antminerapi_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntminerapiServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antminerapi.Antminerapi/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntminerapiServer).GetStatus(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Antminerapi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "antminerapi.Antminerapi",
	HandlerType: (*AntminerapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopGracefully",
			Handler:    _Antminerapi_StopGracefully_Handler,
		},
		{
			MethodName: "StopNow",
			Handler:    _Antminerapi_StopNow_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Antminerapi_Start_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Antminerapi_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.lakeparime.com/apis/antminerapi/antminerapi.proto",
}

func init() {
	proto.RegisterFile("golang.lakeparime.com/apis/antminerapi/antminerapi.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0x95, 0x81, 0x22, 0x5c, 0xd4, 0xc1, 0x2c, 0x55, 0x16, 0xfe, 0x09, 0x89, 0x01, 0x5d,
	0x51, 0x61, 0x40, 0x6c, 0xb0, 0x94, 0x89, 0x81, 0x48, 0xec, 0x87, 0x63, 0x82, 0x45, 0xec, 0xb3,
	0x9c, 0xab, 0x22, 0x9e, 0x8c, 0xd7, 0x43, 0xc5, 0xae, 0xe2, 0x2c, 0x99, 0xfc, 0xb3, 0xfd, 0xdd,
	0xf9, 0xfc, 0x89, 0x87, 0x86, 0x5a, 0x74, 0x0d, 0xb4, 0xf8, 0xad, 0x3d, 0x06, 0x63, 0x35, 0x28,
	0xb2, 0x2b, 0xf4, 0xa6, 0x5b, 0xa1, 0x63, 0x6b, 0x9c, 0x0e, 0xe8, 0x4d, 0x9e, 0xc1, 0x07, 0x62,
	0x92, 0xf3, 0xec, 0xa8, 0x84, 0xd4, 0x46, 0x91, 0x0b, 0x58, 0xf7, 0x44, 0x35, 0x38, 0xcd, 0xb1,
	0x8d, 0x22, 0x6b, 0xc9, 0xa5, 0x25, 0x16, 0x97, 0xf7, 0x13, 0xcf, 0x7a, 0xea, 0x75, 0x70, 0x54,
	0xeb, 0x21, 0xc5, 0xaa, 0x8b, 0x47, 0x31, 0xab, 0x18, 0x79, 0xdb, 0xc9, 0xdb, 0x7d, 0x5a, 0x16,
	0x67, 0xc5, 0xf5, 0x62, 0xbd, 0x84, 0x81, 0x7d, 0xc1, 0xee, 0xcb, 0xb8, 0x26, 0xde, 0xbf, 0x25,
	0x6e, 0xfd, 0x5b, 0x88, 0xf9, 0xd3, 0x30, 0xb1, 0xbc, 0x11, 0x8b, 0x8a, 0xc9, 0x6f, 0x02, 0x2a,
	0xfd, 0xb9, 0x6d, 0xdb, 0x1f, 0x79, 0x0c, 0x69, 0xc4, 0x77, 0x32, 0x75, 0x39, 0xda, 0xc9, 0x2b,
	0x71, 0xb8, 0xa3, 0x5f, 0xa9, 0x9f, 0xc4, 0x2e, 0xc5, 0x41, 0xc5, 0x18, 0x78, 0x12, 0x02, 0x71,
	0xb4, 0xd1, 0x9c, 0x3e, 0x32, 0x06, 0x4f, 0x20, 0xf7, 0x1c, 0x91, 0xe7, 0x73, 0x71, 0xaa, 0xc8,
	0xe6, 0xaa, 0x76, 0x9a, 0x72, 0xf2, 0x63, 0xf6, 0xef, 0xe7, 0xee, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x60, 0x8e, 0xbd, 0xa5, 0xce, 0x01, 0x00, 0x00,
}
